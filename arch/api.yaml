openapi: 3.0.3
# ADD REQUIRED TO REQUIRED FIELDS
# TODO: Remove GET quizzes/{quiz_id}/revisions???
# TODO: Change revisions to rejected??
info:
  title: Moelasware
  description: ''
  version: 1.0.11
servers:
  - url: https://moelasware.io
paths:
  /login/:
    description: "Login with username and password"
    post:
      requestBody:
        content:
          application/json:
            schema:
              type:
                object
              properties:
                username:
                  type: string
                password:
                  type: string
    
      responses:
        '200':
          description: "Successfully logged user in"
          content:
              application/json:
                schema:
                  $ref: '#/components/schemas/id'
              
        '401':
          description: "Invalid credentials"
      
  /quizzes/{quiz_id}:
    description: Question with answers
    parameters:
        - in: path
          name: quiz_id
          schema:
            type: integer
          required: true
    get:
      # TODO: Move quiz reviews to their own endpoint?

      description: Get a quiz
      responses:
        '200':
          description: "Successfuly received a quiz"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/partial_quiz'
              
              examples:
                quiz_example:
                  $ref: '#/components/examples/quiz_example'
                  
    patch:
      description: "Add a revision"
      requestBody:
        content:
          application/json:
            schema:
              # TODO: ADD a revision schema
              type:
                object
                
      responses:
        '204':
          description: "Successfully reviewed a quiz"
  
  /quizzes:
  # TODO: ADD query parameters to filter out quizzes
  # by user, for example.
    description: Questions with answers
    post:
      description: Post a quiz to be reviewed
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quiz"
            examples:
              quiz_example:
                $ref: "#/components/examples/quiz_example"
              quiz_example_2:
                $ref: "#/components/examples/quiz_example_2"
            
      responses:
        '201':
            description: "Created a new quiz successfully"
            content:
              application/json:
                schema:
                  type: integer
                
                examples:
                  return_id:
                    value:
                      id: 3
    get:
      description: "Get all quizzes"
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "Retrieved quizzes successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/quiz"
  /quizzes/{quiz_id}/reviewers:
    description: Reviewers of a given qui
    parameters:
        - in: path
          name: quiz_id
          schema:
            type: integer
          required: true
    get:
      description: "Get reviewers"
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "Retrieved reviewers successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/id'
  /quizzes/{quiz_id}/revisions:
    description: Rejected reviews
    parameters:
      - in: path
        name: quiz_id
        schema:
          type: integer
        required: true
    get:
      description: "Get rejected reviews"
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "Retrieved revisions successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/quiz'
  /quizzes/{quiz_id}/reviews:
    description: "Quiz reviews"
    parameters:
      - in: path
        name: quiz_id
        schema:
          type: integer
        required: true
    get:
      description: "Get a quizz's reviews"
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "Retrieved revisions successfully"
          content:
            application/json:
              schema:
                type:
                  array
                items:
                  $ref: '#/components/schemas/review'
    post:
      description: Post a review

          
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/review"
      responses:
        '201':
            description: "Successfully reviewed a quiz"
            # TODO: Return Review ID

      
  /tests:
    description: Test reviewed quizzes
    post:
      description: Generate a new test
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/test_config"
      responses:
        '201':
          description: "Generated a new test successfully"
          content:
            application/json:
              schema:
                # TODO: Return a partial test that doesn't 
                # include the author
                $ref: '#/components/schemas/test'
                
    get:
      description: "Get all tests"
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "Successfully fetched all tests"
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/test"
  /tests/{test_id}:
    description: Tests made of reviewed quizzes
    parameters:
      - in: path
        name: test_id
        schema:
          type: integer
        required: true
    get:
      description: "Get a particular test"
      responses:
        '200':
          description: "Retrieved test successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/test'
  /tests/{test_id}/submissions:
    description: Solved submissions of a given Test
    parameters:
        - in: path
          name: test_id
          schema:
            type: integer
          required: true
    get:
      description: "Get all submissions of a given Test"
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "Retrieved test submissions successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/submission'
  
    post:
      description: "Add new submission"
      # TODO: Change answers from being an array of array of integers
      # to allow for questions being out of order
      
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: array
                items:
                  type: integer
        

      responses:
        '200':
          description: "Submited test successfully"
          content:
              application/json:
                schema:
                  type: integer
                  
                examples:
                  return_id:
                    value:
                      id: 2
  # TODO: merge both endpoints with a path enum schema??
  /users/{user_id}:
    description: "Users"
    get:
      description: "Get user with a given id"
      parameters:
        - in: path
          name: user_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: "Successfully retrieved user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/partial_user"
  /users/@me:
    description: "Users"
    get:
      description: "Get your own user"
      responses:
        '200':
          description: "Successfully retrieved user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/partial_user"
                
                
  /users/{user_id}/submissions:
    description: Submissions by the user
    parameters:
            - in: path
              name: user_id
              schema:
                type: integer
              required: true
    get:
      description: "Get user submissions"
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "Retrieved revisions successfully"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partial_submission'
  /fame:
    get:
      description: Get hall of fame
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        '200':
          description: "Retrieved hall of fame"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/partial_user'
              

components:
  schemas:
    id:
      type: integer
      minimum: 1
      
    partial_user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        username:
          type: string
          example: "moelas"
    user:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        username: 
          type: string
          example: "xXxmanelxXx"
        
        submissions:
          type: array
          items:
            $ref: '#/components/schemas/submission'
    partial_submission:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        test_id:
          $ref: '#/components/schemas/id'
        
        answers:
          type: array
          items:
            type: array
            items:
              type: integer
    submission:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        submitter_id:
          $ref: '#/components/schemas/id'
          
        test_id:
          $ref: '#/components/schemas/id'
        
        answers:
          type: array
          items:
            type: array
            items:
              type: integer
    test:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        config:
            $ref: '#/components/schemas/test_config'
        name: 
          type: string
        author:
          $ref: '#/components/schemas/id'
          
        quizzes:
          type: array
          items:
            $ref: '#/components/schemas/quiz'
    test_config:
      type: object
      properties:
        num_quizzes:
          type: integer
          minimum: 4
        allowed_tags:
          type: array
          items: 
            type: string
          example: ["Animals", "Names", "Space", "Math", "Literature"]
        quizzes:
          type: array
          items:
            $ref: "#/components/schemas/id"
          example: [1,5,2,10]
      oneOf:
        - required: [num_quizzes, allowed_tags]
        - required: [quizzes]
    partial_quiz:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        question: 
          type: string
          example: "What color is an orange?"
        
        author: 
          $ref: '#/components/schemas/id'

        description:
          type: string
          example: "This question is about the fruit, orange, and it's color"
          
        tags:
          type: array
          items: 
            type: string
          example:
            ["Animals", "Names"]
          
        accepted:
          type: boolean

        answers:
          type: array
          items:
            $ref: '#/components/schemas/quiz_answer'

      required:
        - question
        - answers
        - accepted
    quiz:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        question: 
          type: string
          example: "What color is an orange?"
        
        author: 
          $ref: '#/components/schemas/id'

        reviews:
          type: array
          items:
              $ref: '#/components/schemas/review'

        description:
          type: string
          example: "This question is about the fruit, orange, and it's color"
          
        tags:
          type: array
          items: 
            type: string
          example:
            ["Animals", "Names"]
          
        accepted:
          type: boolean

        answers:
          type: array
          items:
            $ref: '#/components/schemas/quiz_answer'

      required:
        - question
        - answers
        - accepted
    quiz_answer:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        text:
          type: string
        correct:
          type: boolean
        justification:
          type: string
          
      example:
        text: "An orange is red"
        correct: false
        justification: "Oranges are orange, not red"
    review:
      properties:
        id:
          $ref: '#/components/schemas/id'
        reviewer: 
          $ref: "#/components/schemas/id"
        accepted:
          type: boolean
          example: false
        comment:
          type: string
          example: "There is no correct answer"
  parameters:
    offsetParam:  
      name: offset
      in: query
      description: Number of items to skip before returning the results.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    limitParam:       
      name: limit
      in: query
      description: Maximum number of items to return.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        maximum: 100
        default: 20
  examples:
    quiz_example:
      value:
        question: "What color is an orange?"
        accepted: true
        answers:  
          - text: "Red"
            correct: false
            justification: "Oranges are orange, not red!"
          - text: "Orange"
            correct: true
            justification: "Oranges are orange!"
          - text: "Blue"
            correct: false
            justification: "Oranges are orange, not blue!"
          - text: "Green"
            correct: false
            justification: "Oranges are orange, not green!"
      summary: "Orange"
   
    quiz_example_2:
      value:
        question: "Which of the following startup names is objectively superior?"
        accepted: false
        reviews: "TODO: ADD REVIEWS"
        answers:  
          - text: "Moelasware"
            correct: false
            justification: "Doesn't even have quiz in the name"
          - text: "Quizzly"
            correct: false
            justification: ""
          - text: "Quizzhut"
            correct: true
      summary: "Quizzhut"
      
    two_quizzes:
      value:
        name: "Example Test"
        quizzes:
          - $ref: '#/components/examples/quiz_example'
          - $ref: '#/components/examples/quiz_example_2'
        summary: "Example test"

